name: CI Workflow

on:
  push:
    branches: [fix/#6]  
  pull_request:
    branches: []


jobs:
  style-test:
    name: Style-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          environment-file: env.yml
          auto-activate-base: false
          activate-environment: fsds-env 
            
      - name: Run isort
        shell: bash -l {0}
        run: isort . --check --diff 
            
      - name: Run black
        shell: bash -l {0}
        run: black . --check --diff

      - name: Run flake8
        shell: bash -l {0}
        run: flake8 .

  unit-functional-tests:
    name: Unit & Functional Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          environment-file: env.yml
          auto-activate-base: false
          activate-environment: fsds-env

      - name: Install package in dev mode
        shell: bash -l {0}
        run: pip install -e .

      - name: Run pytest
        shell: bash -l {0}
        run: pytest tests/
        env:
          PYTHONPATH: "."

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: unit-functional-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          environment-file: env.yml
          auto-activate-base: false
          activate-environment: fsds-env

      - name: Install tree tool
        run: sudo apt-get install -y tree

      - name: Tree before build
        run: tree -L 2

      - name: Build the package
        shell: bash -l {0}
        run: |
          pip install build
          python -m build

      - name: Tree after build
        run: tree -L 2

      - name: Upload dist and env
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            env.yml

   install:
    name: Install & Smoke Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./downloaded

      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          environment-file: ./downloaded/env.yml
          auto-activate-base: false
          activate-environment: fsds-env

      - name: Install built package
        shell: bash -l {0}
        run: |
          pip install downloaded/dist/*.whl

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Create mlruns directory
        run: mkdir -p ./mlruns

      - name: Run ingest_data.py
        shell: bash -l {0}
        env:
          MLFLOW_TRACKING_URI: file:./mlruns
        run: |
          echo "Running ingest_data.py"
          python scripts/ingest_data.py --output_folder outputs/data

          echo "Uploading data to Azure Blob Storage..."
          az storage blob upload-batch \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} \
            --destination output/csv_files \
            --source outputs/data \
            --auth-mode login

      - name: Download data from Azure Blob Storage
        run: |
          echo "Downloading data from Azure Blob Storage..."
          rm -rf outputs/data && mkdir -p outputs/data
          az storage blob download-batch \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} \
            --source output/csv_files \
            --destination outputs/data \
            --auth-mode login

      - name: Run train.py and score.py
        shell: bash -l {0}
        env:
          MLFLOW_TRACKING_URI: file:./mlruns
        run: |
          echo "Running training and scoring"
          python scripts/train.py --output_folder outputs/model --input_folder outputs/data
          python scripts/score.py --model_folder outputs/model --dataset_folder outputs/data --output_folder outputs/metric

  build-and-push-ACR:
    name: Build and Push to ACR
    needs: install
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure Container Registry
        run: |
          echo "${{ secrets.ACR_PASSCODE }}" | docker login ${{ secrets.ACR_NAME }}.azurecr.io -u ${{ secrets.ACR_USERNAME }} --password-stdin
 
      - name: Build Docker Image
        run: docker build -t fsds-image:lts .

      - name: Tag Docker image for ACR
        run: docker tag fsds-image:lts ${{ secrets.ACR_NAME }}.azurecr.io/fsds-image:lts

      - name: Push Docker Image to ACR
        run: docker push ${{ secrets.ACR_NAME }}.azurecr.io/fsds-image:lts


  pull-and-run-ACR:
    name: RUN ACR
    needs: build-and-push-ACR
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Azure Container Registry
        run: |
          echo "${{ secrets.ACR_PASSCODE }}" | docker login ${{ secrets.ACR_NAME }}.azurecr.io -u ${{ secrets.ACR_USERNAME }} --password-stdin
            
      - name: Pull Docker image from ACR
        run: docker pull ${{secrets.ACR_NAME}}.azurecr.io/fsds-image:lts
            
      - name: Run Docker container
        run: docker run -d --name housing-model2 -p 8080:80 ${{secrets.ACR_NAME}}.azurecr.io/fsds-image:lts

      - name: Check active container
        run: docker ps
            
  monitor-model:
    name: Monitoring Drift
    needs: pull-and-run-ACR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          environment-file: env.yml
          auto-activate-base: false
          activate-environment: fsds-env
      
      - name: Install package in dev mode
        shell: bash -l {0}
        run: pip install -e .
      
      - name: Run monitoring script
        shell: bash -l {0}
        run: python scripts/monitor.py 
        continue-on-error: true

      - name: Check drift status
        shell: bash -l {0}
        run: |
          if grep -q "drift:true" drift.txt; then
            echo "Performance drift detected"
            exit 1
          else
            echo "No Performance drift detected"
          fi
             
        